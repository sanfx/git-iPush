#! /usr/bin/env python
# -*-coding: utf8-*-
# file: git-ipush
# command: git ipush

import argparse
import subprocess
import os
import re
import send
import sys


def validate_address(address):
	"""	If address looks like a valid e-mail address, return it. Otherwise
		raise ArgumentTypeError.

		Args:
			address(string): email address to send to

	"""
	if re.match('^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$', address):
		return address
	raise argparse.ArgumentTypeError('Invalid e-mail address: %s' % address)

def main():
	parser = argparse.ArgumentParser(prog='ipush',
		description='Utility to push the last commit and email the color diff')
	parser.add_argument('-v', '--verbose', action='store_true', 
		help='if enabled will spit every command and its resulting data.')
	parser.add_argument('-c', '--compose', action='store_true', 
		help='compose message in default git editor to be sent prefixed with diff')
	parser.add_argument('-to', type=validate_address, metavar='Email',
		help='enter a valid email you want to send to.', nargs='?')
	parser.add_argument('-V', '--version', action='version',
		version='%(prog)s 1.0, Required Python 2.7')
	parser.add_argument('-p', '--patches', type=int, default=0,metavar='*.patch files',
		help='total number of pathces of last commits to email')
	parser.add_argument('-d', '--diff', required=False, default='HEAD^ HEAD',metavar='HEAD^ HEAD',
		help='if present pass arguments to it as you \
		will do to git diff in inverted commas')
	args = parser.parse_args()
	preCheck(args)


def configDb():
	"""	Reads git global config file

		Returns:
			config(dict): git config settings
	"""
	# Read git config file
	configFile, _ = execGitCommand('git config --list')
	config = {}
	for line in filter(None, configFile.split("\n")):
		config[line.split("=")[0]] = line.split("=")[-1]

	return config

def launchEditor(editor):
	"""	this function launchs the default git editor
		set in git config for user to compose message
		to be sent along with git diff.

		Args:
			editor(str): name or path of editor
		Returns:
			msg(str): html formatted message
	"""

	filePath = os.path.join(os.getcwd(), "compose.txt")
	wfh = open(filePath, 'w')
	wfh.close()

	if os.path.exists(filePath):
		# using sublime
		if re.search(r'ubl', editor):
			diff = subprocess.Popen(['cat', filePath], stdout=subprocess.PIPE)
			pr = subprocess.Popen(
				editor,
				stdout=subprocess.PIPE,
				stderr=subprocess.PIPE,
				shell=True,
				stdin=diff.stdout
				)
			pr.wait()
			if pr.returncode == 0:
				msg = pr.stdout.read()
		else:
			# using vim or nano
			pr = subprocess.Popen([editor, filePath], stdin=open('/dev/tty', 'r'))
			pr.wait()
			if pr.returncode == 0:
				with open(filePath, 'r') as fh:
					msg = fh.readlines()
	os.remove(filePath)
	return "".join(msg).replace("\n","<br>")


def preCheck(args):
	"""	This function do a pre-check of the repository state
		and default value to variables from git config

		Args:
			args(argparse.Namespace): data from git config
	"""
	config = configDb()

	editor = config['core.editor'] if config.has_key('core.editor') else 'vi'

	VERBOSE = args.verbose

	diffCmd = 'git diff %s' % args.diff

	branchName, _ = execGitCommand('git rev-parse --abbrev-ref HEAD')

	# stripping newline character which got appended when pulling branch name
	branchName = branchName.split("\n")[0]
	commitComment, _ = execGitCommand('git log -1 --pretty=%B')
	subject = "%s: %s" % (branchName, commitComment)

	# check for fatal error when executing git command
	diffData, error = execGitCommand(diffCmd, VERBOSE)
	if 'fatal' not in error.split(":"):
		modifiedData, error = execGitCommand('git status', VERBOSE)
		if any([re.search(word, modifiedData) for word in ['modified', 'untracked']]):
			print "\x1b[31m You have uncommited changes, Commit and try again\x1b[m"
			return

		cmtMesgs, _ = execGitCommand('git log origin/%s..HEAD --decorate --oneline' % branchName)
		if cmtMesgs:
			unPushComit = filter(None, cmtMesgs.split("\n"))
			print ("\n\x1b[31mInitiating push for %s commits listed below to remote\x1b[32m/%s\x1b[m\n%s") % (
				len(unPushComit), branchName, cmtMesgs)

		# only push that is displayed or the last commit
		if diffCmd in ['git diff HEAD^ HEAD', 'git diff HEAD~ HEAD']:
			pushBranch(VERBOSE)
			name , eror = execGitCommand('git format-patch -%s' % args.patches)
			patches = filter(None, name.split("\n"))
		if diffData:
			message = ""
			if args.compose:
				message = launchEditor(editor)
			htmlDiff = getHtml(diffData.split("\n"))
			message = "%s<br><br>%s" % (message, htmlDiff)
			# email id to be sent from
			fromId = config['user.email'] if config.has_key(
				'user.email') else raw_input("Your Email:")

			mailto = args.to if args.to else raw_input("Who do you want to send to? ")
			emailFrom = validate_address(fromId)

			emailDiff(subject, mailto, message, patches)
	else:
		print error.capitalize()


def getHtml(diffData):
	"""	This method convertes git diff data to html color code

		Args:
			diffData(sting): diff between commits in simple text
	"""
	openTag = "<span style='font-size: .80em; color: "
	openTagEnd = "00;font-family: courier, arial, helvetica, sans-serif;'>"
	nbsp = '&nbsp;&nbsp;&nbsp;&nbsp;'
	lines = []

	for line in diffData:
		color = "#ff00" if line.startswith('-') else (
			'#0079' if line.startswith('+') else '#0000')
		tabs = line.count('\t')
		lines.append("%s%s%s%s%s</span><br>" % 
			((openTag, color, openTagEnd, nbsp*tabs ,line)))
	return ''.join(lines)


def execGitCommand(command=None, verbose=False):
	"""	Function used to get data out of git commads
		and errors in case of failure.

		Args:
			command(string): string of a git command
			verbose(bool): whether to display every command
			and its resulting data.
		Return:
			(tuple): string of Data and error if present
	"""
	if command:
		pr = subprocess.Popen(command, shell=True,
			stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		msg = pr.stdout.read()
		err = pr.stderr.read()
		txt = "\x1b[32mResult:\x1b[m\n"+msg if msg else "\x1b[31mError:\x1b[m\n"+err
		if verbose:
			print "Executing '%s'\n%s" % (command, txt)
		return msg, err

def emailDiff(subject, emailTo, htmlDiff, attachment):
	""" This function send color diff via email

		Args:
			subject(string): name of the branch with commit message
			htmlDiff(string): html formatted string
			attachment(list): list of file names to be attached
	"""
	# add tool signature
	htmlDiff = """%s<br><br>
	Sent using git ipush<br>
	git clone https://sanfx@bitbucket.org/sanfx/git-ipush.git""" % htmlDiff

	mail = send.EMail(
						mailFrom=configDb()['ipush.mailfrom'], 
						server=configDb()['ipush.smtpserver'], 
						usrname=configDb()['ipush.mailfrom'].split('@')[0],
						password=os.getenv('PASS'), 
						debug=False
					)
	mail.sendMessage(subject, htmlDiff, attachment, emailTo)
	print "\x1b[31m Diff of branch, %s sent to email: %s .\x1b[m" %  (
		subject, emailTo)

def pushBranch(VERBOSE):
	"""	Pushes the branch to remote repository

		Args:
			VERBOSE(bool): defines whether to spit out which command
			is being executed and result of command.
		Return:
			(bool) True if push Succesfull else False 
	"""

	_, err = execGitCommand('git push')
	if re.search(r'rejected', err):
		txt = '\x1b[31mDo you want to try force push?\n'
		print '%s%sEnter yes to force Push else any key to cancel\x1b[m' % (err, txt)
		# default value yes and hit enter without entering anything
		answer = raw_input('[YES]')
		if answer and answer.lower() not in ['yes', 'y', 'f', 'git push -f']:
			print "Cancelled !!!"
		else:
			execGitCommand('git push -f', VERBOSE)
			print "\x1b[33mPush Succesfull !\x1b[m" if VERBOSE else ""
			return True
	else:
		print "\x1b[33mPush Succesfull !\x1b[m" if VERBOSE else ""
		return True
	return False


if __name__ == '__main__':
	sys.exit(main())
